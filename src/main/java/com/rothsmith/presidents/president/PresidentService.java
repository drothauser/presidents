/*
 * (c) 2016 Rothsmith, LLC All Rights Reserved.
 */
package com.rothsmith.presidents.president;

import java.util.Comparator;
import java.util.List;

import javax.ws.rs.GET;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static java.util.stream.Collectors.toList;

import com.rothsmith.dao.dbutils.DbUtilsJdbcDao;

/**
 * Service for maintaining U.S. President data.
 * 
 * @author drothauser
 *
 */
public class PresidentService {

	/**
	 * SLF4J Logger for PresidentRestService.
	 */
	private static final Logger LOGGER =
	    LoggerFactory.getLogger(PresidentService.class);

	/**
	 * DAO to maintain PRESIDENT table. See {@link DbUtilsJdbcDao}.
	 */
	private final DbUtilsJdbcDao<PresidentDto, PresidentDto> presidentDao;

	/**
	 * DAO to query PRESIDENTS_VIEW table. See {@link DbUtilsJdbcDao}.
	 */
	private final DbUtilsJdbcDao<PresidentsViewDto, PresidentsViewDto> presidentsViewDao;

	/**
	 * Constructor that sets the president DAO.
	 */
	public PresidentService() {
		presidentDao = new DbUtilsJdbcDao<PresidentDto, PresidentDto>(
		    "/presidentdao.properties");
		presidentsViewDao =
		    new DbUtilsJdbcDao<PresidentsViewDto, PresidentsViewDto>(
		        "/presidentsviewdao.properties");
	}

	/**
	 * Create a PRESIDENT record.
	 * 
	 * @param presidentDto
	 *            {@link PresidentDto} instance
	 * @return {@link PresidentDto} instance with the id attribute that was
	 *         generated by the SQL insert operation
	 */
	public PresidentDto create(final PresidentDto presidentDto) {

		LOGGER.debug(
		    String.format("Creating president with the following data:%n%s",
		        presidentDto.toString()));

		int id = presidentDao.insert(presidentDto);
		LOGGER.info(
		    String.format("Created president with president id = %d for:%n %s",
		        id, presidentDto));

		presidentDto.setId(id);

		String msg = String.format("Successfully added President %s.",
		    presidentDto.getLastname());
		LOGGER.info(msg);

		return presidentDto;

	}

	/**
	 * Delete record for the given id.
	 * 
	 * @param id
	 *            the president Id of the record to delete
	 * @return the number of records deleted. If successful, should equal 1.
	 * 
	 */
	public Integer delete(Integer id) {

		PresidentDto presidentDto = new PresidentDto();

		presidentDto.setId(id);

		int count = presidentDao.delete(presidentDto);

		String msg = String.format("Deleted %d president.", count);
		LOGGER.info(msg);

		return count;

	}

	
	
	/**
	 * Retrieve all president records.
	 * 
	 * @return {@link List} of {@link PresidentsViewDto}s.
	 */
	@GET
	public List<PresidentsViewDto> list() {

		return presidentsViewDao.selectByStatement("query.selectAll");
		

	}

	/**
	 * Return a PRESIDENT record for the given id.
	 * 
	 * @param id
	 *            the president Id of the record to delete
	 * @return @return the {@link PresidentDto} for the given id.
	 */
	public PresidentDto read(final Integer id) {

		PresidentDto params = new PresidentDto();

		params.setId(id);

		List<PresidentDto> presidentDtos = presidentDao.select(params);

		PresidentDto presidentDto = presidentDtos.get(0);
		LOGGER.info(String.format("President data:%n%s", presidentDto));

		return presidentDto;

	}

	/**
	 * Update president data.
	 * 
	 * @param presidentDto
	 *            {@link PresidentDto} instance from UI
	 * @return the {@link PresidentDto} with the updated data
	 * 
	 */
	public PresidentDto update(final PresidentDto presidentDto) {

		LOGGER.debug(
		    String.format("Updating President %s with the following data:%n%s",
		        presidentDto.getLastname(), presidentDto.toString()));

		int count = presidentDao.update(presidentDto);
		LOGGER.debug(String.format("Updated %d PRESIDENT record(s).", count));

		String msg =
		    String.format("Updated President %s", presidentDto.getLastname());
		LOGGER.info(msg);

		return presidentDto;

	}

}

/*
 * (c) 2016 Rothsmith, LLC All Rights Reserved.
 */
package com.rothsmith.presidents.state;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.rothsmith.dao.dbutils.DbUtilsJdbcDao;

/**
 * Service for maintaining U.S. State data.
 * 
 * @author drothauser
 *
 */
public class StateService {

	/**
	 * SLF4J Logger for StateRestService.
	 */
	private static final Logger LOGGER =
	    LoggerFactory.getLogger(StateService.class);

	/**
	 * {@link DbUtilsJdbcDao} to test.
	 */
	private final DbUtilsJdbcDao<StateDto, StateDto> stateDao;

	/**
	 * Constructor that sets the state DAO.
	 */
	public StateService() {
		stateDao =
		    new DbUtilsJdbcDao<StateDto, StateDto>("/statedao.properties");
	}

	/**
	 * Create a state record.
	 * 
	 * @param stateDto
	 *            {@link StateDto} instance
	 * @return {@link StateDto} instance with the id attribute that was
	 *         generated by the SQL insert operation
	 */
	public StateDto create(final StateDto stateDto) {

		LOGGER
		    .debug(String.format("Creating state with the following data:%n%s",
		        stateDto.toString()));

		int id = stateDao.insert(stateDto);
		LOGGER.info(String.format("Created state with state = %d for:%n %s", id,
		    stateDto));

		stateDto.setId(id);

		String msg =
		    String.format("Successfully added state: %s.", stateDto.getName());
		LOGGER.info(msg);

		return stateDto;

	}

	/**
	 * Delete state record for the given id.
	 * 
	 * @param id
	 *            the state Id of the record to delete
	 * @return the number of records deleted. If successful, should equal 1.
	 */
	public Integer delete(final Integer id) {

		StateDto stateDto = new StateDto();

		stateDto.setId(id);

		int count = stateDao.delete(stateDto);

		String msg = String.format("Deleted %d state.", count);
		LOGGER.info(msg);

		return count;

	}

	/**
	 * Retrieve all state records.
	 * 
	 * @return {@link List} of {@link StateDto}s.
	 */
	public List<StateDto> list() {

		return stateDao.selectByStatement("query.selectAll");

	}

	/**
	 * Return a STATE record for the given id.
	 * 
	 * @param id
	 *            the state Id of the record to read
	 * @return the {@link StateDto} for the given id.
	 * 
	 */
	public StateDto read(final Integer id) {

		StateDto params = new StateDto();

		params.setId(id);

		List<StateDto> stateDtos = stateDao.select(params);
		StateDto stateDto = stateDtos.get(0);
		LOGGER.info(String.format("State data:%n%s", stateDto));

		return stateDto;

	}

	/**
	 * Update state data.
	 * 
	 * @param stateDto
	 *            {@link StateDto} instance
	 * @return the {@link StateDto} with the updated data
	 */
	public StateDto update(final StateDto stateDto) {

		LOGGER
		    .debug(String.format("Updating state with the following data:%n%s",
		        stateDto.toString()));

		int count = stateDao.update(stateDto);
		LOGGER.debug(String.format("Updated %d STATE record(s).", count));

		String msg = String.format("Updated %s", stateDto.getName());
		LOGGER.info(msg);

		return stateDto;

	}

}

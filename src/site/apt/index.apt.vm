            ------
            presidents UI Framework Evaluation Application
            ------

presidents UI Framework Evaluation Application
	
	This application exposes a {{RESTful}} service layer that
	provides {{CRUD}} operations on a relational database that contains information
	on U.S. presidents for the purpose of evaluating various JavaScript frameworks
	(e.g. Angular, Node.js, etc.).
	
* Installation

	Download the <<presidents-standalone.jar>> from {{{http://jenkins.fcci-group.com/view/Home/view/Admin/view/Demo/view/presidents/job/presidents-build/}Jenkins}}
	to a local directory of your choice.  A suggestion is that you create a <<C:\presidents>> folder and copy it there.

	
* Running

	From a command prompt, cd to the folder where you downloaded the presidents-standalone.jar file 
	and launch it as follows:
	
+--------------------------
java -jar presidents-standalone.jar
+--------------------------

	This command will start Tomcat on localhost on port 8080.  If you want to run it on a 
	different port, use the <<-httpPort>> parameter. For example:
	
+--------------------------
java -jar presidents-standalone.jar -httpPort 9090
+--------------------------

	To get help on other parameters, run as follows:

+--------------------------
java -jar presidents-standalone.jar --help
+--------------------------	

* Testing

	[[1]] Using your favorite editor, create the pages and scripts required for your chosen framework or web technology.
	
			
		\
		* It is recommend that you create a typical web project using Maven in Eclipse. For an example of such a project 
		see the {{{https://Subversion.fcci-group.com/svn/test/presidents-jq/trunk}presidents-jq}} project. It demonstrates
		how to use jQuery to interact with the presidents services.
		
	
	[[2]] Program your application to access data via <<http://localhost:8080/presidents/rest/...>> 
	(of course, change the port if you decide to run presidents on a port other than 8080).
	
		\
		* See {{{./api.html}presidents API Documentation}} for detailed infomration on the syntax of the API calls.
	
	[]
	
* Technologies Utilized

** Jersey

	{{{https://jersey.java.net/download.html}Jersey 2.x}} - Used to provide JAX-RS RESTful services.

** Jackson

	{{{https://jersey.java.net/documentation/latest/media.html#json.jackson}Jackson 2.x}} - JSON provider.
	
** Apache Derby

	{{{https://db.apache.org/derby/}Apache Derby}} - Used to provide an in-memory relational database.

** jQuery <(for sample UI)>

	{{{https://api.jquery.com/category/version/3.1/}jQuery}} version 3.1.0 was used to provide a basic front-end to validate the services in this project.

** Embedded Tomcat

	The {{{http://tomcat.apache.org/maven-plugin-2.2/}Apache Tomcat Maven Plugin}} was used to create an executable jar that starts up a Tomcat 
	container and runs the web application.

%{include|source=pom.xml|snippet=#tomcat7-maven-plugin}

* Glossary

** {CRUD}

	CRUD stands for <<C>>reate, <<R>>ead, <<U>>pdate, <<D>>elete. This application provides
	RESTful services that perform CRUD operations on relational database entities. 
	The database provided maintains information for the U.S. presidents.
	
** {RESTful}

	<<RE>>presentational <<S>>tate <<T>>ransfer: {{{https://en.wikipedia.org/wiki/Representational_state_transfer}REST}} 
	is an architectural style that specifies constraints, such as the uniform interface, that if applied to a web service 
	induce desirable properties, such as performance, scalability, and modifiability, that enable services to work 
	best on the Web. 
